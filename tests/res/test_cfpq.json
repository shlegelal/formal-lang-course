{
  "test_constrained_transitive_closure": [
    {
      "graph": "digraph {}",
      "cfg": "",
      "expected": []
    },
    {
      "graph": "digraph {}",
      "cfg": "S -> a",
      "expected": []
    },
    {
      "graph": "digraph {1 [is_start=True, is_final=False]; 2 [is_start=False, is_final=True]; 1 -> 2 [label=a]}",
      "cfg": "",
      "expected": []
    },
    {
      "graph": "digraph {1 [is_start=True, is_final=False]; 2 [is_start=False, is_final=True]; 1 -> 2 [label=a]}",
      "cfg": "S -> a",
      "expected": [
        {
          "start": "1",
          "end": "2",
          "variable": "S"
        }
      ]
    },
    {
      "graph": "digraph {1 [is_start=False, is_final=False]; 2 [is_start=False, is_final=False]; 1 -> 2 [label=a]}",
      "cfg": "S -> a",
      "expected": [
        {
          "start": "1",
          "end": "2",
          "variable": "S"
        }
      ]
    },
    {
      "graph": "digraph {0 [is_start=True, is_final=True]; 1 [is_start=True, is_final=True]; 2 [is_start=True, is_final=True]; 3 [is_start=True, is_final=True]; 0 -> 1 [label=a]; 1 -> 2 [label=a]; 2 -> 0 [label=a]; 2 -> 3 [label=b]; 3 -> 2 [label=b]}",
      "cfg": "S -> A B | A S1\nS1 -> S B\nA -> a\nB -> b",
      "expected": [
        {
          "start": "0",
          "end": "1",
          "variable": "A"
        },
        {
          "start": "1",
          "end": "2",
          "variable": "A"
        },
        {
          "start": "2",
          "end": "0",
          "variable": "A"
        },
        {
          "start": "2",
          "end": "3",
          "variable": "B"
        },
        {
          "start": "3",
          "end": "2",
          "variable": "B"
        },
        {
          "start": "1",
          "end": "3",
          "variable": "S"
        },
        {
          "start": "1",
          "end": "2",
          "variable": "S1"
        },
        {
          "start": "0",
          "end": "2",
          "variable": "S"
        },
        {
          "start": "0",
          "end": "3",
          "variable": "S1"
        },
        {
          "start": "2",
          "end": "3",
          "variable": "S"
        },
        {
          "start": "2",
          "end": "2",
          "variable": "S1"
        },
        {
          "start": "1",
          "end": "2",
          "variable": "S"
        },
        {
          "start": "1",
          "end": "3",
          "variable": "S1"
        },
        {
          "start": "0",
          "end": "3",
          "variable": "S"
        },
        {
          "start": "0",
          "end": "2",
          "variable": "S1"
        },
        {
          "start": "2",
          "end": "2",
          "variable": "S"
        },
        {
          "start": "2",
          "end": "3",
          "variable": "S1"
        }
      ]
    }
  ],
  "test_helling": [
    {
      "graph": "digraph {}",
      "query": "",
      "start_nodes": [],
      "final_nodes": [],
      "start_var": null,
      "expected": []
    },
    {
      "graph": "digraph {}",
      "query": "S -> a",
      "start_nodes": [],
      "final_nodes": [],
      "start_var": null,
      "expected": []
    },
    {
      "graph": "digraph {}",
      "query": "S -> a",
      "start_nodes": null,
      "final_nodes": null,
      "start_var": null,
      "expected": []
    },
    {
      "graph": "digraph {1;2; 1 -> 2 [label=a]}",
      "query": "S -> a",
      "start_nodes": null,
      "final_nodes": null,
      "start_var": null,
      "expected": [
        ["1", "2"]
      ]
    },
    {
      "graph": "digraph {0;1;2;3; 0 -> 1 [label=a]; 1 -> 2 [label=a]; 2 -> 0 [label=a]; 2 -> 3 [label=b]; 3 -> 2 [label=b]}",
      "query": "S -> a S b | a b",
      "start_nodes": null,
      "final_nodes": null,
      "start_var": null,
      "expected": [
        ["1", "2"],
        ["2", "3"],
        ["1", "3"],
        ["0", "2"],
        ["0", "3"],
        ["2", "2"],
        ["1", "2"]
      ]
    },
    {
      "graph": "digraph {0;1;2;3; 0 -> 1 [label=a]; 1 -> 2 [label=a]; 2 -> 0 [label=a]; 2 -> 3 [label=b]; 3 -> 2 [label=b]}",
      "query": "S -> a S b | a b",
      "start_nodes": ["0", "1", "3"],
      "final_nodes": ["3"],
      "start_var": null,
      "expected": [
        ["1", "3"],
        ["0", "3"]
      ]
    }
  ]
}
