{
  "test_check": [
    {
      "input": "",
      "is_correct": true
    },
    {
      "input": "x = y",
      "is_correct": true
    },
    {
      "input": "x = _y",
      "is_correct": true
    },
    {
      "input": "x = Y",
      "is_correct": true
    },
    {
      "input": "x = 1y",
      "is_correct": false
    },
    {
      "input": "x = _some_vArIabLe123",
      "is_correct": true
    },
    {
      "input": "x = 101",
      "is_correct": true
    },
    {
      "input": "x = 0",
      "is_correct": true
    },
    {
      "input": "x = 023423",
      "is_correct": false
    },
    {
      "input": "x = 0000",
      "is_correct": false
    },
    {
      "input": "x = -1035345435",
      "is_correct": true
    },
    {
      "input": "x = true",
      "is_correct": true
    },
    {
      "input": "x = false",
      "is_correct": true
    },
    {
      "input": "x = r\"a* b* (c | d)\"",
      "is_correct": true
    },
    {
      "input": "x = c\"S -> a S b | $\"",
      "is_correct": true
    },
    {
      "input": "x = g.set_starts({1, 2, 3})",
      "is_correct": true
    },
    {
      "input": "x = set_starts()",
      "is_correct": false
    },
    {
      "input": "x = set_starts({1, 2, 3}, g)",
      "is_correct": false
    },
    {
      "input": "x = g.set_finals({1, 2, 3})",
      "is_correct": true
    },
    {
      "input": "x = set_finals({1, 2, 3})",
      "is_correct": false
    },
    {
      "input": "x = set_finals({1, 2, 3}, g, 1)",
      "is_correct": false
    },
    {
      "input": "x = g.add_starts({1, 2, 3})",
      "is_correct": true
    },
    {
      "input": "x = add_starts({1, 2, 3})",
      "is_correct": false
    },
    {
      "input": "x = add_starts({1, 2, 3}, g)",
      "is_correct": false
    },
    {
      "input": "x = g.add_finals({1, 2, 3})",
      "is_correct": true
    },
    {
      "input": "x = add_finals({1, 2, 3})",
      "is_correct": false
    },
    {
      "input": "x = add_finals({1, 2, 3}, g, 1)",
      "is_correct": false
    },
    {
      "input": "x = g.starts",
      "is_correct": true
    },
    {
      "input": "x = starts",
      "is_correct": false
    },
    {
      "input": "x = g.finals",
      "is_correct": true
    },
    {
      "input": "x = finals()",
      "is_correct": false
    },
    {
      "input": "x = (g.reachables)",
      "is_correct": true
    },
    {
      "input": "x = g.nodes",
      "is_correct": true
    },
    {
      "input": "x = map({ v -> 1 }, g)",
      "is_correct": true
    },
    {
      "input": "x = map({ v -> 1 })",
      "is_correct": false
    },
    {
      "input": "x = map({ v -> 1 }, g, 1)",
      "is_correct": false
    },
    {
      "input": "x = filter({ v -> false }, {1, 2, 3})",
      "is_correct": true
    },
    {
      "input": "x = filter({ v -> s in {1 .. 10} }, {1, 2, 3})",
      "is_correct": true
    },
    {
      "input": "x = filter({ v -> false })",
      "is_correct": false
    },
    {
      "input": "x = filter({ v -> false }, g, 1)",
      "is_correct": false
    },
    {
      "input": "x = load_dot(\"path.txt\")",
      "is_correct": true
    },
    {
      "input": "x = load_dot()",
      "is_correct": false
    },
    {
      "input": "x = load_graph(\"path.txt\", 1)",
      "is_correct": false
    },
    {
      "input": "x = a & b",
      "is_correct": true
    },
    {
      "input": "x = & b",
      "is_correct": false
    },
    {
      "input": "x = a &",
      "is_correct": false
    },
    {
      "input": "x = a ^ b",
      "is_correct": true
    },
    {
      "input": "x = ^ b",
      "is_correct": false
    },
    {
      "input": "x = a ^",
      "is_correct": false
    },
    {
      "input": "x = a | b",
      "is_correct": true
    },
    {
      "input": "x = | b",
      "is_correct": false
    },
    {
      "input": "x = a |",
      "is_correct": false
    },
    {
      "input": "x = a in b",
      "is_correct": true
    },
    {
      "input": "x = in b",
      "is_correct": false
    },
    {
      "input": "x = a in",
      "is_correct": false
    },
    {
      "input": "x = a*",
      "is_correct": true
    },
    {
      "input": "x = * b",
      "is_correct": false
    },
    {
      "input": "x = a * b",
      "is_correct": false
    },
    {
      "input": "x = {}",
      "is_correct": true
    },
    {
      "input": "x = {1}",
      "is_correct": true
    },
    {
      "input": "x = {1 .. 10}",
      "is_correct": true
    },
    {
      "input": "x = {1, 2, 3, 4, 5, 6}",
      "is_correct": true
    },
    {
      "input": "x = {,}",
      "is_correct": false
    },
    {
      "input": "x = {1, 2,}",
      "is_correct": false
    },
    {
      "input": "x = {1 2 3}",
      "is_correct": false
    },
    {
      "input": "x = (a, b)",
      "is_correct": true
    },
    {
      "input": "x = (,)",
      "is_correct": false
    },
    {
      "input": "x = (a,)",
      "is_correct": false
    },
    {
      "input": "x = (a, \"label\", b)",
      "is_correct": true
    },
    {
      "input": "x = (,,)",
      "is_correct": false
    },
    {
      "input": "x = (a, \"label\", b, 1)",
      "is_correct": false
    },
    {
      "input": "x = (a, \"label\", b,)",
      "is_correct": false
    },
    {
      "input": "x = (a)",
      "is_correct": true
    },
    {
      "input": "x = ()",
      "is_correct": false
    },
    {
      "input": "x = (((((1, 2), ((1), (1, 2, (3, 4)), (1, 2))))))",
      "is_correct": true
    },
    {
      "input": "x = map({ _ -> 1 }, {})",
      "is_correct": true
    },
    {
      "input": "x = map({ some_Long_Name0 -> 1 }, {})",
      "is_correct": true
    },
    {
      "input": "x = map({ (a, b) -> 1 }, {})",
      "is_correct": true
    },
    {
      "input": "x = map({ (a, b, c) -> 1 }, {})",
      "is_correct": true
    },
    {
      "input": "x = map({ (((_, (v1, _)), (a, b)), _, (_, _)) -> 1 }, {})",
      "is_correct": true
    },
    {
      "input": "x = map({ 1 -> 1 }, {})",
      "is_correct": false
    },
    {
      "input": "x =",
      "is_correct": false
    },
    {
      "input": "= 1",
      "is_correct": false
    },
    {
      "input": "x = 1 2 3",
      "is_correct": false
    },
    {
      "input": "x y z = 1",
      "is_correct": false
    },
    {
      "input": "print(1)",
      "is_correct": true
    },
    {
      "input": "print()",
      "is_correct": false
    },
    {
      "input": "print(1, 2, 3)",
      "is_correct": false
    },
    {
      "input": "print(1 2 3)",
      "is_correct": false
    },
    {
      "input": "print(1) # some comment",
      "is_correct": true
    },
    {
      "input": "\n\n\n\n\nprint(1)\n print(2)\nprint(3)\r\n\n\n\n\n\n\r\n\n\nprint(4)\n\n\n\n\n\n",
      "is_correct": true
    },
    {
      "input": "print(1)\n print(2)\nprint(3)#comment\n#comment\n#comment\n\n\n\n\n\n\nprint(4)\n#comment",
      "is_correct": true
    }
  ],
  "test_save_dot": [
    {
      "input": "g = load_graph(\"skos\").set_starts({0 .. 10})\n\nres = map({(_, f) -> f}, g.reachables)",
      "expected": "strict digraph parsed_text {\n0 [label=prog];\n1 [label=stmt];\n0 -> 1;\n2 [label=\"'g'\", shape=box];\n1 -> 2;\n3 [label=\"'='\", shape=box];\n1 -> 3;\n4 [label=expr];\n1 -> 4;\n5 [label=expr];\n4 -> 5;\n6 [label=\"'load_graph'\", shape=box];\n5 -> 6;\n7 [label=\"'('\", shape=box];\n5 -> 7;\n8 [label=\"'\\\"skos\\\"'\", shape=box];\n5 -> 8;\n9 [label=\"')'\", shape=box];\n5 -> 9;\n10 [label=\"'.'\", shape=box];\n4 -> 10;\n11 [label=\"'set_starts'\", shape=box];\n4 -> 11;\n12 [label=\"'('\", shape=box];\n4 -> 12;\n13 [label=expr];\n4 -> 13;\n14 [label=\"'{'\", shape=box];\n13 -> 14;\n15 [label=\"'0'\", shape=box];\n13 -> 15;\n16 [label=\"'..'\", shape=box];\n13 -> 16;\n17 [label=\"'10'\", shape=box];\n13 -> 17;\n18 [label=\"'}'\", shape=box];\n13 -> 18;\n19 [label=\"')'\", shape=box];\n4 -> 19;\n20 [label=\"'\\n'\", shape=box];\n0 -> 20;\n21 [label=\"'\\n'\", shape=box];\n0 -> 21;\n22 [label=stmt];\n0 -> 22;\n23 [label=\"'res'\", shape=box];\n22 -> 23;\n24 [label=\"'='\", shape=box];\n22 -> 24;\n25 [label=expr];\n22 -> 25;\n26 [label=\"'map'\", shape=box];\n25 -> 26;\n27 [label=\"'('\", shape=box];\n25 -> 27;\n28 [label=\"'{'\", shape=box];\n25 -> 28;\n29 [label=pattern];\n25 -> 29;\n30 [label=\"'('\", shape=box];\n29 -> 30;\n31 [label=pattern];\n29 -> 31;\n32 [label=\"'_'\", shape=box];\n31 -> 32;\n33 [label=\"','\", shape=box];\n29 -> 33;\n34 [label=pattern];\n29 -> 34;\n35 [label=\"'f'\", shape=box];\n34 -> 35;\n36 [label=\"')'\", shape=box];\n29 -> 36;\n37 [label=\"'->'\", shape=box];\n25 -> 37;\n38 [label=expr];\n25 -> 38;\n39 [label=\"'f'\", shape=box];\n38 -> 39;\n40 [label=\"'}'\", shape=box];\n25 -> 40;\n41 [label=\"','\", shape=box];\n25 -> 41;\n42 [label=expr];\n25 -> 42;\n43 [label=expr];\n42 -> 43;\n44 [label=\"'g'\", shape=box];\n43 -> 44;\n45 [label=\"'.'\", shape=box];\n42 -> 45;\n46 [label=\"'reachables'\", shape=box];\n42 -> 46;\n47 [label=\"')'\", shape=box];\n25 -> 47;\n48 [label=\"'<EOF>'\", shape=box];\n0 -> 48;\n}\n"
    }
  ]
}
